"""Schemas for the SRE Orchestrator Agent."""

from typing import Union, List, Optional, Dict, Any
from datetime import datetime
from pydantic import Field
from atomic_agents.lib.base.base_io_schema import BaseIOSchema

from orchestration_engine.tools.searxng_search import (
    SearxNGSearchToolInputSchema,
    SearxNGSearchToolOutputSchema,
)
from orchestration_engine.tools.calculator import (
    CalculatorToolInputSchema,
    CalculatorToolOutputSchema,
)
from orchestration_engine.tools.rag_search import (
    RAGSearchToolInputSchema,
    RAGSearchToolOutputSchema
)
from orchestration_engine.tools.deep_research import (
    DeepResearchToolInputSchema,
    DeepResearchToolOutputSchema,
)


class OrchestratorInputSchema(BaseIOSchema):
    """Input schema for the SRE Orchestrator Agent. Contains the system alert and its context."""

    system_alert: str = Field(..., description="The system alert received (e.g., 'High CPU utilization on server X').")
    system_context: str = Field(..., description="Contextual information about the system experiencing the alert (e.g., 'Production web server, recent deployment v1.2').")


class OrchestratorOutputSchema(BaseIOSchema):
    """Combined output schema for the Orchestrator Agent. Contains the tool to use and its parameters."""

    tool: str = Field(..., description="The tool to use: 'search', 'calculator', 'rag', or 'deep-research'")
    tool_parameters: Union[SearxNGSearchToolInputSchema, CalculatorToolInputSchema, RAGSearchToolInputSchema, DeepResearchToolInputSchema] = Field(
        ..., description="The parameters for the selected tool"
    )


class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Orchestrator Agent."""

    final_answer: str = Field(..., description="The final answer generated based on the tool output and user query.")

